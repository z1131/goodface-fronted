name: Frontend CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build & Push Nginx image to ACR
        env:
          ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
          ACR_NAMESPACE: ${{ secrets.ACR_NAMESPACE }}
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e
          echo "$ACR_PASSWORD" | docker login "$ACR_REGISTRY" -u "$ACR_USERNAME" --password-stdin
          IMAGE="$ACR_REGISTRY/$ACR_NAMESPACE/goodface-fronted-nginx:$IMAGE_TAG"
          docker build -f deploy/Dockerfile -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Prepare dist
        run: |
          set -e
          rm -rf dist && mkdir -p dist/html
          # 同步静态文件（排除内部目录，避免自复制 dist）
          rsync -av --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'deploy' \
            --exclude '.vscode' \
            --exclude '_ws_test' \
            --exclude 'dist' \
            ./ dist/html/
          # 拷贝 Nginx 部署模板
          cp -v deploy/docker-compose.yml dist/
          cp -v deploy/nginx.conf dist/

      - name: Upload dist to ECS (home tmp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.ECS_HOST }}
          port: ${{ secrets.ECS_PORT }}
          username: ${{ secrets.ECS_USER }}
          key: ${{ secrets.ECS_SSH_KEY }}
          source: "dist/*"
          target: "/tmp/goodface-fronted/dist"
          overwrite: true

      - name: Deploy on ECS via SSH
        uses: appleboy/ssh-action@v1.0.0
        env:
          ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
          ACR_NAMESPACE: ${{ secrets.ACR_NAMESPACE }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          host: ${{ secrets.ECS_HOST }}
          port: ${{ secrets.ECS_PORT }}
          username: ${{ secrets.ECS_USER }}
          key: ${{ secrets.ECS_SSH_KEY }}
          envs: ACR_REGISTRY,ACR_NAMESPACE,IMAGE_TAG
          script: |
            set -euo pipefail
            echo "===> Prepare /opt/goodface-fronted"
            sudo mkdir -p /opt/goodface-fronted

            echo "===> Move dist into /opt/goodface-fronted"
            if [ -d /tmp/goodface-fronted/dist ]; then
              sudo rsync -a --delete /tmp/goodface-fronted/dist/ /opt/goodface-fronted/
            elif [ -d /tmp/goodface-fronted ]; then
              sudo rsync -a --delete /tmp/goodface-fronted/ /opt/goodface-fronted/
            fi

            cd /opt/goodface-fronted
            echo "===> Tree (before flatten)"
            ls -la

            # 若仍存在 dist 子目录，扁平化到根目录
            if [ -d dist ]; then
              echo "===> Flatten dist to root"
              sudo rsync -a --delete dist/ .
              sudo rm -rf dist
            fi

            echo "===> Tree (after flatten)"
            ls -la

            if [ ! -f docker-compose.yml ]; then
              echo "ERROR: missing docker-compose.yml in /opt/goodface-fronted" >&2
              exit 1
            fi

            echo "===> Write .env for compose"
            sudo tee /opt/goodface-fronted/.env >/dev/null << EOF
            ACR_REGISTRY=${ACR_REGISTRY}
            ACR_NAMESPACE=${ACR_NAMESPACE}
            IMAGE_TAG=${IMAGE_TAG}
            EOF

            echo "===> Detect docker compose"
            if docker compose version >/dev/null 2>&1; then
              COMPOSE_CMD="sudo docker compose"
            elif docker-compose version >/dev/null 2>&1; then
              COMPOSE_CMD="sudo docker-compose"
            else
              echo "ERROR: docker compose not installed" && exit 1
            fi

            echo "===> Compose pull & up"
            if echo "$COMPOSE_CMD" | grep -q 'docker compose'; then
              $COMPOSE_CMD --env-file .env -f docker-compose.yml pull
              $COMPOSE_CMD --env-file .env -f docker-compose.yml up -d --remove-orphans
            else
              # compose v1 自动读取 .env
              $COMPOSE_CMD -f docker-compose.yml pull
              $COMPOSE_CMD -f docker-compose.yml up -d --remove-orphans
            fi

            echo "===> Validate nginx"
            docker exec goodface-fronted nginx -t
            docker exec goodface-fronted nginx -s reload || docker restart goodface-fronted