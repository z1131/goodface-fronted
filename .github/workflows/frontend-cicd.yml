name: Frontend CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build & Push Nginx image to ACR
        env:
          ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
          ACR_NAMESPACE: ${{ secrets.ACR_NAMESPACE }}
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e
          echo "$ACR_PASSWORD" | docker login "$ACR_REGISTRY" -u "$ACR_USERNAME" --password-stdin
          IMAGE="$ACR_REGISTRY/$ACR_NAMESPACE/goodface-fronted-nginx:$IMAGE_TAG"
          docker build -f deploy/Dockerfile -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Prepare dist
        run: |
          set -e
          rm -rf dist && mkdir -p dist/html
          # 同步静态文件（排除内部目录，避免自复制 dist）
          rsync -av --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'deploy' \
            --exclude '.vscode' \
            --exclude '_ws_test' \
            --exclude 'dist' \
            ./ dist/html/
          # 拷贝 Nginx 部署模板
          cp -v deploy/docker-compose.yml dist/
          cp -v deploy/nginx.conf dist/

      - name: Upload dist to ECS (home tmp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.ECS_HOST }}
          port: ${{ secrets.ECS_PORT }}
          username: ${{ secrets.ECS_USER }}
          key: ${{ secrets.ECS_SSH_KEY }}
          source: "dist/*"
          target: "/tmp/goodface-fronted/dist"
          overwrite: true

      - name: Deploy on ECS via SSH
        uses: appleboy/ssh-action@v1.0.0
        env:
          ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
          ACR_NAMESPACE: ${{ secrets.ACR_NAMESPACE }}
          IMAGE_TAG: ${{ github.sha }}
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          FRONT_HTTP_PORT: ${{ secrets.FRONT_HTTP_PORT }}
          FRONT_HTTPS_PORT: ${{ secrets.FRONT_HTTPS_PORT }}
        with:
          host: ${{ secrets.ECS_HOST }}
          port: ${{ secrets.ECS_PORT }}
          username: ${{ secrets.ECS_USER }}
          key: ${{ secrets.ECS_SSH_KEY }}
          envs: ACR_REGISTRY,ACR_NAMESPACE,IMAGE_TAG,ACR_USERNAME,ACR_PASSWORD,FRONT_HTTP_PORT,FRONT_HTTPS_PORT
          script: |
            set -euo pipefail
            echo "===> Prepare /opt/goodface-fronted"
            sudo mkdir -p /opt/goodface-fronted

            echo "===> Move dist into /opt/goodface-fronted"
            if [ -d /tmp/goodface-fronted/dist ]; then
              sudo rsync -a --delete /tmp/goodface-fronted/dist/ /opt/goodface-fronted/
            elif [ -d /tmp/goodface-fronted ]; then
              sudo rsync -a --delete /tmp/goodface-fronted/ /opt/goodface-fronted/
            fi

            cd /opt/goodface-fronted
            echo "===> Tree (before flatten)"
            ls -la

            # 若仍存在 dist 子目录，扁平化到根目录（不要 --delete，避免源目录被删除）
            if [ -d dist ]; then
              echo "===> Flatten dist to root"
              sudo rsync -a dist/ .
              sudo rm -rf dist
            fi

            echo "===> Tree (after flatten)"
            ls -la

            if [ ! -f docker-compose.yml ]; then
              echo "ERROR: missing docker-compose.yml in /opt/goodface-fronted" >&2
              exit 1
            fi

            echo "===> Write .env for compose"
            sudo tee /opt/goodface-fronted/.env >/dev/null << EOF
            ACR_REGISTRY=${ACR_REGISTRY}
            ACR_NAMESPACE=${ACR_NAMESPACE}
            IMAGE_TAG=${IMAGE_TAG}
            FRONT_HTTP_PORT=${FRONT_HTTP_PORT:-8080}
            FRONT_HTTPS_PORT=${FRONT_HTTPS_PORT:-8443}
            EOF

            echo "===> Docker login ACR"
            echo "${ACR_PASSWORD}" | sudo docker login "${ACR_REGISTRY}" -u "${ACR_USERNAME}" --password-stdin

            echo "===> Detect docker compose"
            if docker compose version >/dev/null 2>&1; then
              COMPOSE_CMD="sudo docker compose"
            elif docker-compose version >/dev/null 2>&1; then
              COMPOSE_CMD="sudo docker-compose"
            else
              echo "ERROR: docker compose not installed" && exit 1
            fi

            echo "===> Prepare TLS certs"
            sudo mkdir -p /opt/goodface-fronted/certs
            CERT="/opt/goodface-fronted/certs/server.crt"
            KEY="/opt/goodface-fronted/certs/server.key"

            if [ -n "${{ secrets.FRONT_SSL_CERT }}" ] && [ -n "${{ secrets.FRONT_SSL_KEY }}" ]; then
              echo "[deploy] Writing certs from GitHub Secrets"
              sudo tee "$CERT" >/dev/null <<'CRT'
${{ secrets.FRONT_SSL_CERT }}
CRT
              sudo tee "$KEY" >/dev/null <<'KEY'
${{ secrets.FRONT_SSL_KEY }}
KEY
              sudo chmod 644 "$CERT" "$KEY"
            else
              if [ ! -s "$CERT" ] || [ ! -s "$KEY" ]; then
                echo "[deploy] Generating self-signed cert (fallback)"
                CN='${{ secrets.FRONT_SSL_CN }}'; CN=${CN:-interview.zzhper.cn}
                if command -v openssl >/dev/null 2>&1; then
                  sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                    -keyout "$KEY" -out "$CERT" \
                    -subj "/C=CN/ST=Hangzhou/L=Hangzhou/O=GOODFACE/OU=FE/CN=${CN}" >/dev/null 2>&1
                  sudo chmod 644 "$CERT" "$KEY"
                else
                  echo "::error::OpenSSL not found and no secrets provided; cannot prepare TLS certs"
                  ls -la /opt/goodface-fronted/certs || true
                  exit 1
                fi
              fi
            fi

            echo "===> Preflight certs"
            ls -la /opt/goodface-fronted/certs || true
            wc -c "$CERT" "$KEY" || true
            if [ ! -s "$CERT" ] || [ ! -s "$KEY" ]; then
              echo "::error::TLS cert files missing or empty at /opt/goodface-fronted/certs"
              exit 1
            fi

            echo "===> Ensure docker network"
            sudo docker network create goodface-net || true

            echo "===> Compose pull & up"
            if echo "$COMPOSE_CMD" | grep -q 'docker compose'; then
              $COMPOSE_CMD --env-file .env -f docker-compose.yml pull
              $COMPOSE_CMD --env-file .env -f docker-compose.yml up -d --remove-orphans
            else
              # compose v1 自动读取 .env
              $COMPOSE_CMD -f docker-compose.yml pull
              $COMPOSE_CMD -f docker-compose.yml up -d --remove-orphans
            fi

            echo "===> Validate nginx"
            for i in {1..120}; do state=$(docker inspect -f '{{.State.Running}}' goodface-fronted 2>/dev/null || true); [ "$state" = "true" ] && break; sleep 1; done
            docker inspect -f '{{.State.Running}}' goodface-fronted | grep -q true || { echo '::error::container not running after 120s'; docker logs --tail=200 goodface-fronted; exit 1; }
            docker exec -T goodface-fronted nginx -t || { docker logs --tail=200 goodface-fronted; exit 1; }
            docker exec -T goodface-fronted nginx -s reload || docker restart goodface-fronted